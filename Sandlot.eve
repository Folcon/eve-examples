# The Sandlot
```css
{for a good time, leave this here}
```

## What is this?
This baseball batting order app is in honor of @baseballfan69 and demonstrates reusable components and tag behavior in the form of #`player-card` and how to inject those components into the browser. This is an extremely useful abstraction to learn because it lets you build in layers, instead of having to build a feature top-to-bottom before it can be useful. In this case, I define the page layout first, then add some player cards into the page layout, then add some buttons into those cards, and finally add some functionality to those buttons. The app also shows some of the ways `sort` can be used, and how to choose specific records out of a list of records.

## Page Layout
### Containers
I want to break the page down into three columns: one for the active lineup, one for the bench players, and one for players on injured reserve.
```
commit @browser
  [#div class:"container" children:
    [#div #active class:"lineup" text:"Batting Order"]
    [#div #inactive class:"lineup" text:"Bench"]
    [#div #IR class:"lineup" text:"Injured Reserve"]]
```

### Active Lineup
The first column drawn should be the active batting order. While I could have specified all the text and contents of each player in this block, note that I used two tags, #`player-card` and #`moveable`, whose contents and behavior get defined later. Since every player listed is going to have the same information, #`player-card` lets me drop the tag in and define all the html and content later, which is done in the Player Cards section after this one.
```
search @session @browser
  player = [#player not(#bench) not(#injured) firstname lastname position bats lineup]
  active = [#active]

bind @browser
  active.children += [#div #lineup children: [#player-card #moveable sort:lineup player]]
```

### Bench Players
These are the bench players. Note that #`player-card` is used again, saving me the work of having to define all the same html and content that's used in the active lineup. The big difference here is the ordering of the players. Whereas the players in the lineup have a deliberate and specific order (which makes sense for things like a batting order), I don't need a specific order for the bench players. I do, however, want to know how many there are and make sure they render in the same order each time, so I sort by the `player` variable to get an index, `n`. Each player gets assigned an index, which is how I sort the bench players, and also set `player.lineup` to that index so they get numbered 1, 2, 3, and so on.
```
search @session @browser
  player = [#player #bench firstname lastname position bats lineup]
  inactive = [#inactive]
  n = sort[value:player]

bind @session @browser
  player.lineup := n
  inactive.children += [#div #lineup children: [#player-card #benched sort:n player]]
```

### Injured Reserve
These are the injured reserve players. This section is functionally identical to the bench player section, except it gets merged into the #`IR` section on the page. There's only one player on the IR and no functionality exists to move him elsewhere, because he is a jerk.
```
search @session @browser
  player = [#player #injured not(#bench) firstname lastname position bats lineup]
  IR = [#IR]
  n = sort[value:player]

bind @session @browser
  player.lineup := n
  IR.children += [#div #lineup children: [#player-card sort:n player]]
```

## Player Cards
This is where the magic happens. Every time this finds #`player-card` in the browser, it will make a #`div` for each player and spit out a player card. It checks to see if the player has a nickname as well, and just leaves a space between the first and last names if there isn't. It's worth mentioning that because I want this to be as general a template as possible, a handful of architectural decisions were made to facilitate that. In each of the three page layout columns, I restrict the search parameters there to only ask for players that would be in each section. In the Roster Data, all the players have a `lineup` attribute even though the bench and IR players have an empty string as the value. If you're good at predicting which reusable parts you'll need, you can implement these sorts of things from the outset, or you can figure out where they need to be as you go along and refactor them into your code as you work.
```
search @browser @session
  container = [#player-card player]
  player = [#player firstname lastname position bats lineup]
  middle = if player.nickname then " \"{{player.nickname}}\" "
             else " "

bind @browser
  container <- [#div player class:"lineup-position" children:
    [#div class:"bat-number" text:lineup]
    [#div class:"player-info" children:
      [#div class:"name-line" children:
        [#div class:"position" text:position]
        [#div class:"first-name" text:firstname]
        [#div class:"middle-name" text:middle]
        [#div class:"last-name" text:lastname]]
      [#div class:"bat-hand" text:"Bats: {{bats}}"]
    ]
  ]
```

## Buttons
### Move Up
The active roster also features a cool way to use tags. Since I want to be able to reorder my active lineup, each #`player-card` there is also tagged #`moveable`. This checks to see if a #`player-card` is #`moveable` and adds a child #`div` to it with a #`move-up-btn`, unless that player is already at the top of roster and can't move up any further.
```
search @browser @session
  container = [#div #moveable player]
  not(player.lineup:1)

bind @browser
  container.children += [#div player #move-up-btn class:"ion-chevron-up"]
```

It's like hashtag inception. Just as the #`moveable` tag let Eve know to add a #`move-up-btn`, this block adds another layer of functionality by giving that button some behavior. In this case, when a #`move-up-btn` is clicked, Eve captures who the specific `clicked-player` is, finds whoever is one space above them in the lineup, and switches their places.
```
search @browser @event @session
  [#click element:[#move-up-btn player:clicked-player]]
  above-clicked = [#player lineup:clicked-player.lineup - 1]

commit
  clicked-player.lineup := clicked-player.lineup - 1
  above-clicked.lineup := above-clicked.lineup + 1
```

### Move Down
This block is the mirror of the move up buttons. If a #`player-card` is #`moveable`, and not at the bottom of the lineup, which is what the `count` is checking, then a child #`div` gets added with a #`move-down-btn`.
```
search @browser @session
  container = [#div #moveable player]
  not(player.lineup:count[given:[#player not(#bench) not(#injured)]])

bind @browser
  container.children += [#div #move-down-btn player class:"ion-chevron-down"]
```

Once again the reciprocal of the previous section, when a #`move-down-btn` is clicked, Eve captures the specific `clicked-player`, finds the player one space below them in the lineup, and switches their places.
```
search @browser @event @session
  [#click element:[#move-down-btn player:clicked-player]]
  below-clicked = [#player lineup:clicked-player.lineup + 1]

commit
  clicked-player.lineup := clicked-player.lineup + 1
  below-clicked.lineup := below-clicked.lineup - 1
```

### Remove from Lineup
If a player is #`moveable`, it means they're in the active lineup and should be able to be removed from the active lineup and sent to the bench. This simply looks for any #`moveable` players and adds a #`deactivate` button to them.
```
search @browser @session
  container = [#div #moveable player]
  

bind @browser
  container.children += [#div #deactivate player class:"ion-log-out"]
```

This gives #`deactivate` its behavior. The `clicked-player` is sent to the bench and is stripped of their lineup order. All the players who were below them on the lineup get moved up a spot so that there aren't gaps in the numbering.
```
search @browser @event @session
  [#click element:[#deactivate player:clicked-player]]
  players-below = [#player lineup > clicked-player.lineup]

commit
  clicked-player += #bench
  clicked-player.lineup := ""
  players-below.lineup := players-below.lineup - 1
```

This block takes care of an edge case for #`deactivate`. Because the previous block finds all the `players-below` the `clicked-player`, if the player is at the bottom of the lineup then there are no `players-below` and the search block fails, preventing the button from doing anything. This makes sure you can move the ninth batter off the lineup onto the bench.
```
search @browser @event @session
  [#click element:[#deactivate player:clicked-player]]

commit
  clicked-player += #bench
  clicked-player.lineup := ""
```

### Add to Lineup
This adds an #`activate` button to the bench players so we can add them to the active lineup, but only if there are fewer than nine batters already in the lineup.
```
search @browser @session
  container = [#div #benched player]
  active-players = if c = count[given:[#player not(#bench) not(#injured)]] then c else 0
  active-players != 9

bind @browser
  container.children += [#div #activate player class:"ion-log-in"]
```

This gives #`activate` its behavior. When an #`activate` button is clicked, Eve finds out how many active players are in the lineup then adds the `clicked-player` and assigns them the next number in the lineup.
```
search @browser @event @session
  [#click element:[#activate player:clicked-player]]
  active-players = if c = count[given:[#player not(#bench) not(#injured)]] then c else 0
  active-players != 9

commit
  clicked-player -= #bench
  clicked-player.lineup := active-players + 1
```

## Roster Data
Our sample roster data.
```
commit
  [#player firstname:"Kenny" lastname:"DeNu√±ez" position:"P" bats:"R" lineup:1]
  [#player firstname:"Hamilton" lastname:"Porter" nickname:"Ham" position:"C" bats:"R" lineup:2]
  [#player firstname:"Timmy" lastname:"Timmons" position:"IF" bats:"R" lineup:3]
  [#player firstname:"Bertram" lastname:"Grover Weeks" position:"IF" bats:"R" lineup:4]
  [#player firstname:"Alan" lastname:"McClennan" nickname:"Yeah-Yeah" position:"IF" bats:"R" lineup:5]
  [#player firstname:"Benny" lastname:"Rodriguez" nickname:"The Jet" position:"IF" bats:"S" lineup:6]
  [#player firstname:"Scott" lastname:"Smalls" position:"OF" bats:"R" lineup:7]
  [#player firstname:"Michael" lastname:"Palledorous" nickname:"Squints" position:"OF" bats:"R" lineup:8]
  [#player firstname:"Tommy" lastname:"Timmons" nickname:"Repeat" position:"OF" bats:"R" lineup:9]
  [#player #bench firstname:"Thelonius" lastname:"Mertle" position:"IF" bats:"L" lineup:""]
  [#player #bench firstname:"George" lastname:"Ruth" nickname:"Babe" position:"P" bats:"L" lineup:""]
  [#player #bench firstname:"Hercules" lastname:"Mertle" nickname:"The Beast" position:"PR" bats:"S" lineup:""]
  [#player #injured firstname:"" lastname:"Phillips" position:"IF" bats:"R" lineup:""]
```

## Styles
The app needs a good bit of CSS to clean up the three page sections, stylize the player cards, and organize the various buttons.
```css
.container  {
  display: flex;
  flex-direction: row;
  user-select: none;
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

.lineup {
  display: flex;
  flex-direction: column;
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-right: 50px;
  position: relative;
  flex: 1 0 auto;
  min-width: 465px;
}

.lineup-position {
  list-style: none;
  display: flex;
  flex-direction: row;
  align-items: center;
  margin-top: 15px;
  position: relative;
}

.bat-number {
  order: 1;
  font-size: 40px;
  font-weight: bold;
  color: #b4b4b4;
  margin-right: 15px;
  width: 50px;
}

.player-info {
  display: flex;
  flex-direction: column;
  margin: 0px 0px;
  padding: 0px 0px 0px 10px;
  height: 85px;
  width: 400px;
  background: #ffffff;
  border: 1px solid black;
  border-radius: 8px;
  order: 2;
  overflow: hidden;
}

.name-line {
  display: flex;
  flex-direction: row;
  margin: 10px 0px;
}

.position {
  font-size: 14px;
  font-weight: bold;
  margin-right: 8px;
  padding-top: 2px;
  height: 16px;
}

.first-name {
  font-size: 16px;
  text-transform: uppercase;
  height: 16px;
}

.middle-name {
  font-size: 16px;
  text-transform: uppercase;
  height: 16px;
  font-weight: 600;
  white-space: pre;
}

.last-name {
  font-size: 16px;
  text-transform: uppercase;
  height: 16px;

}

.bat-hand {
  font-size: 14px;
  height: 14px;
  text-align: left;
}

.ion-chevron-up {
  position: absolute;
  top: 2px;
  right: 15px;
  font-size: 24px;
}

.ion-chevron-down {
  position: absolute;
  bottom: 2px;
  right: 15px;
  font-size: 24px;
}

.ion-log-out {
  position: absolute;
  right: 15px;
  color: #e65b3c;
  font-size: 24px;
}

.ion-log-in {
  position: absolute;
  right: 15px;
  transform: scaleX(-1);
  color: 009ee0;
  font-size: 24px;
}
```
