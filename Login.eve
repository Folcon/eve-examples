# Log In Application
```css
{there is currently a bug that causes the first CSS block in an Eve program to be disregarded, so for a good time, leave this here}
```

## What is this?

This app demonstrates the use of a  custom form component in a basic log in application. The app contains three views: a login form, a registration form, and a user profile form that displays the information entered during registration. These forms are built using a custom form component, which is defined at the end of the program. The form component allows for the concise definition of forms by defining common behavior like form submission and resetting.

## Application Set Up

The app contains the current page, as well as the current user. Initially, though, there is no user, so we just need to specify the current page.

```
bind @browser
  [#app #div class: "app-wrapper" page: "login"]
```

## Pages

### Log In Form

The log in form co ntains two input boxes, one for the username and another for a password.

```
search @browser
  app = [#app page: "login"]
  
bind @browser
  app.children +=
    [#form name: "Login" sections: 
      [#section fields: 
        [#field type: "input" field: "username"]
        [#field type: "password" field: "password"]]]
    [#button #signup text: "Sign Up" ]
```

A successful login is one where the username and password entered in the login form match some user/password combination stored in the system. For simplicity, passwords are stored as plain text, so we just need to search for a #user with a matching username and password. If one is found, we set it as the user attribute in the #app record.

```eve
search @browser @session
  [#form name: "Login" submission: [data: username]]
  username.key = "username"
  [#form name: "Login" submission: [data: password]]
  password.key = "password"
  user = [#user username: username.value, password: password.value]
  app = [#app]
    
commit @browser
  app.page := "profile"
  app.user := user
```

If the user enters a login that does not match a user, then display a message indicating that the login failed.

```eve disabled
search @browser @session
  [#form name: "Login" submission: [data: username]]
  username.key = "username"
  [#form name: "Login" submission: [data: password]]
  password.key = "password"
  [#user username: username.value, password: password.value]

  
commit @browser
  [#div text: "login failed"]
```


Clicking the sign up button changes the page to the sign up page

```
search @browser @event
  [#click element: [#signup]] 
  app = [#app]
  
commit @browser
  app.page := "signup"
```

### Sign Up Form

The user registration page requests the name, department, a username and password.

```
search @browser
  app = [#app page: "signup"]
  
bind @browser
  app.children +=
    [#form name: "Sign Up" options: [reset: true] sections: 
      [#section name: "User Info" fields: 
        [#field type: "input" field: "full name"]
        [#field type: "input" field: "department"]]
      [#section name: "Account Info" fields: 
        [#field type: "input" field: "username"]
        [#field type: "password" field: "password"]
        [#field type: "password" field: "confirm password"]]]
    [#button #login text: "Log In" ]
```

We need to create a `#user` from the submission of the registration form. This will only work if every field has an entry, and the two password fields match.

```
search @browser
  // Get User Info
  [#form name: "Sign Up" submission: [data: full-name]]
  full-name.key = "full name"
  [#form name: "Sign Up" submission: [data: department]]
  department.key = "department"
  
  // Get Account Info
  [#form name: "Sign Up" submission: [data: username]]
  username.key = "username"
  [#form name: "Sign Up" submission: [data: password]]
  password.key = "password"
  [#form name: "Sign Up" submission: [data: confirm-password]]
  confirm-password.key = "confirm password"

  // The password and the confirmation must match
  password.value = confirm-password.value
  
  app = [#app]

commit @browser
  app.page := "login"
  
commit
  [#user username: username.value 
         password: password.value
         name: full-name.value
         department: department.value]
```

Clicking the login button changes the page back to the login screen

```
search @browser @event
  [#click element: [#login]] 
  app = [#app]
  
commit @browser
  app.page := "login"
```

### Profile Page

```
search @browser
  [#app user]
  
bind @browser
  [#div text: "hello"]
```

The profile page displays information relating to the current user profile. It is accessed after a successful submission of the login form, which creates a user attribute in the #app.

```
search @browser @session
  app = [#app page: "profile" user]
  
bind @browser
  app.children += 
    [#div text: "Welcome {{user.username}}!"]
    [#button #logout text: "Log Out"]
```

Clicking logout returns to the login page, and removes the user from `#app`.

```
search @browser @event
  [#click element: [#logout]] 
  app = [#app]
  
commit @browser
  app.user := none
  app.page := "login"
```

## A Custom Form Element

Forms have a title and one or more sections. Each section has an optional name, and contains one or more fields. Each field additionally has the input type of that field (input, radio button, drop down list, etc.).

A form starts as a `#form` record.

```eve
search @browser
  form = [#form]
  
bind @browser
  form += #div
  form.sort := 0
  form.class := "form"
```

Display the form name

```eve
search @browser
  form = [#form]
  
bind @browser
  form.children += [#h1 sort: 0 text: form.name]
```

Display each section. To properly display sections, we need to add them to the children of the form.

```eve
search @browser
  form = [#form sections]
    
bind @browser
  form.children += [#div form section: sections class: "form-section" sort: 1]
  sections.form := form
```

If the section has a name, display it

```eve
search @browser
  section-display = [#div section]
  
bind @browser
  section-display.children += [#h2 text: section.name, sort: 0]
```

Display the fields in each section. As we did with sections, to display fields we need to move them over to the children of the section display.

```eve
search @browser
  section-display = [#div section]
  field = section.fields
    
bind @browser
  section-display.children += [#div field form: section.form sort: 1 children: 
    [tag: field.type, placeholder: field.field, class: field.type]]
```

Display a submit button at the end of the form

```eve
search @browser
  form = [#form]
  
bind @browser
  form.children += [#button #submit form sort: 100 text: "Submit"]
```

Forms can have an optional reset button, which clears the fields in the form

```eve
search @browser
  form = [#form options: [reset: true]]
  
bind @browser
  form.children += [#button #reset form sort: 101 text: "Reset"]
```

Clicking the reset button clears each field in the form

```eve
search @event @browser
  [#click element: [#reset]]
  field-container = [#div field form]
    
commit @browser
  field-container.children.value := none
```

### Save Input to Records

Form values are saved as a `#submission` when the submit button is clicked. This submission has a liftime equal to that of the `#click`, so a submission must be comitted to a record by the user. This allows the user to implement custom handling logic.

```eve
search @browser @event @session
  click = [#click element: [#submit form]]
  field-container = [#div field form]
  value = field-container.children.value
  key = field.field
  [#time timestamp: time]
  
bind @browser
  form.submission += [#submission click time form data: [key value]]
  field-container.children.value := none
```
### Custom Input Types

Render password fields

```eve
search @browser
  password = [#password]
  
bind @browser
  password += #input
  password.type := "password"
  password.class := "password"
```

Render custom button styles

```eve
search @browser
  button = [#button]
  
bind @browser
  button.class += "button"
```

Test Data
### Test Users
```
commit
  [#user username: "foo" password: "bar"]
  [#user username: "jhammond" password: "password"]
  [#user username: "dnedry" password: "Mr. Goodbytes"]
  [#user username: "hwu" password: "slartibartfast"]
```

Styles

```css
.application-container {
 background-color: #000; 
}

.app-wrapper {
 background-color: #000;
 color: green;
 font-family: monospace;
}
  
.form-section {
 border: 1px solid green; 
 border-radius: 5px;
 padding: 10px;
 margin: 10px;
}

.form {
  border: 1px solid green; 
  border-radius: 5px;
  padding: 10px;
  margin: 10px;
  color: green;
}

.input {
 background-color: #000;
 border-radius: 5px;
 border: 1px solid green;
 padding: 5px;
 margin: 5px;
 font-family: monospace;
 color: green;
 outline: none;
}

.password {
 background-color: #000;
 border-radius: 5px;
 border: 1px solid green;
 padding: 5px;
 margin: 5px;
 font-family: monospace;
 outline: none;
 color: green;
}

.button {
  background-color: #000;
  color: green;
  border-radius: 5px;
  border: 1px solid green;
  padding: 5px;
  margin: 5px;
  cursor: pointer;
}
```