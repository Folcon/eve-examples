# Log In Application
```css
{there is currently a bug that causes the first CSS block in an Eve program to be disregarded, so for a good time, leave this here}
```

## What is this?

This app demonstrates the use of a form component in a basic log in application. The app contains three views: a login form, a registration form, and a user profile form that displays the information entered during registration.

## Set up the application

The app contains the current page, as well as the current user. Initially, though, there is no user, so we just need to specify the current page.

```
bind @browser
  [#app #div page: "login"]
```

## Log In Form

The log in form co ntains two input boxes, one for the username and another for a password.

```
search @browser
  app = [#app page: "login"]
  
bind @browser
  app.children +=
    [#form name: "Login" children: 
      [#section children: 
        [#field type: "input" field: "username"]
        [#field type: "password" field: "password"]]]
    [#button #signup text: "Sign Up" ]
```

A successful login is one where the username and password entered in the login form match some user/password combination stored in the system. For simplicity, passwords are stored as plain text, so we just need to search for a #user with a matching username and password. If one is found, we set it as the user attribute in the #app record.

```
search @browser @session
  [#form name: "Login" submission: [data: username]]
  username.key = "username"
  [#form name: "Login" submission: [data: password]]
  password.key = "password"
  user = [#user username: username.value, password: password.value]
  app = [#app]
  
commit @browser
  app.page := "profile"
  app.user := user
```

Clicking the sign up button changes the page to the sign up page

```
search @browser @event
  [#click element: [#signup]] 
  app = [#app]
  
commit @browser
  app.page := "signup"
```

## Sign Up Form

The user registration page requests the name, department, a username and password.

```
search @browser
  app = [#app page: "signup"]
  
bind @browser
  app.children +=
    [#form name: "Sign Up" options: [reset: true] children: 
      [#section name: "User Info" children: 
        [#field type: "input" field: "full name"]
        [#field type: "input" field: "department"]]
      [#section name: "Account Info" children: 
        [#field type: "input" field: "username"]
        [#field type: "password" field: "password"]
        [#field type: "password" field: "confirm password"]]]
    [#button #login text: "Log In" ]
```

We need to create a `#user` from the submission of the registration form. This will only work if every field has an entry, and the two password fields match.

```
search @browser
  [#form name: "Sign Up" submission: [data: username]]
  username.key = "username"
  [#form name: "Sign Up" submission: [data: password]]
  password.key = "password"
  [#form name: "Sign Up" submission: [data: confirm-password]]
  confirm-password.key = "confirm password"

  // The password and the confirmation must match
  password.value = confirm-password.value
  
  app = [#app]

commit @browser
  app.page := "login"
  
commit
  [#user username: username.value, password: password.value]
```

Clicking the login button changes the page back to the login screen

```
search @browser @event
  [#click element: [#login]] 
  app = [#app]
  
commit @browser
  app.page := "login"
```

## Profile Page

The profile page displays information relating to the current user profile. It is accessed after a successful submission of the login form, which creates a `user` attribute in the `#app`.

```
search @browser @session
  app = [#app page: "profile" user]
  
bind @browser
  app.children += 
    [#div text: "Welcome {{user.username}}!"]
    [#button #logout text: "Log Out"]
```

Clicking logout returns to the login page, and removes the user from `#app`.

```
search @browser @event
  [#click element: [#logout]] 
  app = [#app]
  
commit @browser
  app.user := none
  app.page := "login"
```

## A Custom Form Element

Forms have a title and one or more sections. Each section has an optional name, and contains one or more fields. Each field additionally has the input type of that field (input, radio button, drop down list, etc.).

A form starts as a `#form` record.

```
search @browser
  form = [#form]
  
bind @browser
  form += #div
  form.sort := 0
  form.class := "form"
```

Display the form name

```
search @browser
  form = [#form name]
  
bind @browser
  form.children += [#h1 sort: 0 text: name]
```

Display each section

```
search @browser
  section = [#section]
  
bind @browser
  section += #div
  section.class := "form-section"
  section.sort := 1
```

If the section has a name, display it

```
search @browser
  section = [#section name]
  
bind @browser
  section.children += [#h2 text: section.name]
```

Display the fields in each section

```
search @browser
  field = [#field]
  
bind @browser
  field.tag += field.type 
  field.placeholder := field.field
```

Display a submit button at the end of the form

```
search @browser
  form = [#form]
  
bind @browser
  form.children += [#button #submit form sort: 100 text: "Submit"]
```

Forms can have an optional reset button, which clears the fields in the form

```
search @browser
  form = [#form options: [reset: true]]
  
bind @browser
  form.children += [#button #reset form sort: 101 text: "Reset"]
```

Clicking the reset button clears each field in the form

```
search @event @browser
  [#click element: [#reset form]]
    
commit @browser
  form.children.children.value := none
```

### Save Input to Records

```
search @browser @event @session
  click = [#click element: [#submit form]]
  section = form.children
  key = form.children.children.field
  value = form.children.children.value
  [#time timestamp: time]
  
bind @browser
  form.submission += [#submission click time form data: [section key value]]
  

```
### Custom Input Types

Render password fields

```
search @browser
  password = [#password]
  
bind @browser
  password += #input
```

## Styles

```css
.form-section {
 border: 1px solid black; 
 padding: 10px;
 margin: 10px;
}

.form {
  border: 1px solid black; 
  padding: 10px;
  margin: 10px;
}
```
